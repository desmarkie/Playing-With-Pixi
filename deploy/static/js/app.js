// Generated by CoffeeScript 1.6.3
var App, Dots, MathUtils, Node, Sketch, Smoky, Spirals, Trails,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Sketch = (function() {
  Sketch.prototype.view = null;

  Sketch.prototype.cancelled = false;

  Sketch.prototype.loaded = false;

  Sketch.prototype.renderer = null;

  Sketch.prototype.stage = null;

  function Sketch(renderer) {
    this.renderer = renderer;
  }

  Sketch.prototype.load = function() {
    this.cancelled = false;
    if (!this.loaded) {
      requestAnimationFrame(this.update);
    }
    this.loaded = true;
    this.stage.visible = true;
    return null;
  };

  Sketch.prototype.unload = function() {
    this.cancelled = true;
    this.stage.visible = false;
    return null;
  };

  Sketch.prototype.update = function() {
    requestAnimationFrame(this.update);
    if (this.cancelled) {
      return;
    }
    return null;
  };

  Sketch.prototype.resize = function() {
    return null;
  };

  return Sketch;

})();

Dots = (function(_super) {
  __extends(Dots, _super);

  Dots.id = 'Dots';

  Dots.prototype.dots = [];

  Dots.prototype.deadDots = [];

  Dots.prototype.xCounter = 0;

  Dots.prototype.xLimit = 0;

  Dots.prototype.xDir = 1;

  Dots.prototype.yCounter = 0;

  Dots.prototype.yLimit = 0;

  Dots.prototype.yDir = 1;

  Dots.prototype.curX = 0;

  Dots.prototype.curY = 0;

  Dots.prototype.mouseX = 0;

  Dots.prototype.mouseY = 0;

  Dots.prototype.easeX = 0;

  Dots.prototype.easeY = 0;

  Dots.prototype.spriteSize = 32;

  Dots.prototype.invert = true;

  Dots.prototype.mouseTrail = true;

  Dots.prototype.xFollow = false;

  Dots.prototype.xBounce = true;

  Dots.prototype.xLeft = false;

  Dots.prototype.xRight = false;

  Dots.prototype.xOff = false;

  Dots.prototype.lastX = 'follow';

  Dots.prototype.yFollow = false;

  Dots.prototype.yBounce = false;

  Dots.prototype.yUp = false;

  Dots.prototype.yDown = true;

  Dots.prototype.yOff = false;

  Dots.prototype.lastY = 'follow';

  function Dots(renderer) {
    this.renderer = renderer;
    this.handleMouseMove = __bind(this.handleMouseMove, this);
    this.resize = __bind(this.resize, this);
    this.update = __bind(this.update, this);
    this.unload = __bind(this.unload, this);
    this.load = __bind(this.load, this);
    this.updateGui = __bind(this.updateGui, this);
    Dots.__super__.constructor.call(this, this.renderer);
  }

  Dots.prototype.updateGui = function() {
    var c, _i, _len, _ref;
    _ref = this.gui.__controllers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      c.updateDisplay();
    }
    return null;
  };

  Dots.prototype.load = function() {
    var _this = this;
    if (!this.loaded) {
      this.stage = new PIXI.Stage(window.app.stageColor);
      this.createSprites();
      this.view = document.createElement('div');
      this.view.appendChild(this.renderer.view);
      this.gui = new dat.GUI({
        autoPlace: false
      });
      this.gui.domElement.style.zIndex = 100;
      this.gui.domElement.style.position = 'absolute';
      this.gui.domElement.style.top = 0;
      this.gui.domElement.style.left = 0;
      this.gui.domElement.style.height = 'auto';
      this.view.appendChild(this.gui.domElement);
      this.gui.add(this, 'spriteSize', 16, 128, 8).onFinishChange(function(val) {
        _this.spriteSize = val;
        return _this.resize();
      });
      this.gui.add(this, 'invert');
      this.gui.add(this, 'mouseTrail');
      this.gui.add(this, 'xFollow').onChange(function(val) {
        _this.xFollow = val;
        if (_this.xFollow = true) {
          _this.xBounce = _this.xLeft = _this.xRight = _this.xOff = false;
        } else {
          _this.lastX = 'follow';
          _this.xBounce = _this.xLeft = _this.xRight = false;
          _this.xOff = true;
        }
        return _this.updateGui();
      });
      this.gui.add(this, 'xBounce').onChange(function(val) {
        _this.xFollow = val;
        if (_this.xBounce = true) {
          _this.xFollow = _this.xLeft = _this.xRight = _this.xOff = false;
        } else {
          _this.lastX = 'bounce';
          _this.xFollow = _this.xLeft = _this.xRight = false;
          _this.xOff = true;
        }
        return _this.updateGui();
      });
      this.gui.add(this, 'xLeft').onChange(function(val) {
        _this.xFollow = val;
        if (_this.xLeft = true) {
          _this.xDir = -1;
          _this.xFollow = _this.xBounce = _this.xRight = _this.xOff = false;
        } else {
          _this.lastX = 'left';
          _this.xFollow = _this.xBounce = _this.xRight = false;
          _this.xOff = true;
        }
        return _this.updateGui();
      });
      this.gui.add(this, 'xRight').onChange(function(val) {
        _this.xFollow = val;
        if (_this.xRight = true) {
          _this.xDir = 1;
          _this.xFollow = _this.xBounce = _this.xLeft = _this.xOff = false;
        } else {
          _this.lastX = 'right';
          _this.xFollow = _this.xBounce = _this.xLeft = false;
          _this.xOff = true;
        }
        return _this.updateGui();
      });
      this.gui.add(this, 'xOff').onChange(function(val) {
        _this.xOff = val;
        if (_this.xOff) {
          if (_this.xFollow) {
            _this.lastX = 'follow';
          } else if (_this.xBounce) {
            _this.lastX = 'bounce';
          } else if (_this.xLeft) {
            _this.lastX = 'left';
          } else if (_this.xRight) {
            _this.lastX = 'right';
          }
          _this.xFollow = _this.xBounce = _this.xLeft = _this.xRight = false;
        } else {
          if (_this.lastX === 'follow') {
            _this.xFollow = true;
          } else if (_this.lastX === 'bounce') {
            _this.xBounce = true;
          } else if (_this.lastX === 'left') {
            _this.xLeft = true;
          } else if (_this.lastX === 'right') {
            _this.xRight = true;
          }
        }
        return _this.updateGui();
      });
      this.gui.add(this, 'yFollow').onChange(function(val) {
        _this.yFollow = val;
        if (_this.yFollow = true) {
          _this.yBounce = _this.yUp = _this.yDown = _this.yOff = false;
        } else {
          _this.lastY = 'follow';
          _this.yBounce = _this.yUp = _this.yDown = false;
          _this.yOff = true;
        }
        return _this.updateGui();
      });
      this.gui.add(this, 'yBounce').onChange(function(val) {
        _this.yFollow = val;
        if (_this.yBounce = true) {
          _this.yFollow = _this.yUp = _this.yDown = _this.yOff = false;
        } else {
          _this.lastY = 'bounce';
          _this.yFollow = _this.yUp = _this.yDown = false;
          _this.yOff = true;
        }
        return _this.updateGui();
      });
      this.gui.add(this, 'yUp').onChange(function(val) {
        _this.yFollow = val;
        if (_this.yUp = true) {
          _this.yDir = -1;
          _this.yFollow = _this.yBounce = _this.yDown = _this.yOff = false;
        } else {
          _this.lastY = 'left';
          _this.yFollow = _this.yBounce = _this.yDown = false;
          _this.yOff = true;
        }
        return _this.updateGui();
      });
      this.gui.add(this, 'yDown').onChange(function(val) {
        _this.yFollow = val;
        if (_this.yDown = true) {
          _this.yDir = 1;
          _this.yFollow = _this.yBounce = _this.yUp = _this.yOff = false;
        } else {
          _this.lastY = 'right';
          _this.yFollow = _this.yBounce = _this.yUp = false;
          _this.yOff = true;
        }
        return _this.updateGui();
      });
      this.gui.add(this, 'yOff').onChange(function(val) {
        _this.yOff = val;
        if (_this.yOff) {
          if (_this.yFollow) {
            _this.lastY = 'follow';
          } else if (_this.yBounce) {
            _this.lastY = 'bounce';
          } else if (_this.yUp) {
            _this.lastY = 'up';
          } else if (_this.yDown) {
            _this.lastY = 'down';
          }
          _this.yFollow = _this.yBounce = _this.yUp = _this.yDown = false;
        } else {
          if (_this.lastY === 'follow') {
            _this.yFollow = true;
          } else if (_this.lastY === 'bounce') {
            _this.yBounce = true;
          } else if (_this.lastY === 'up') {
            _this.yUp = true;
          } else if (_this.lastY === 'down') {
            _this.yDown = true;
          }
        }
        return _this.updateGui();
      });
      this.gui.close();
    }
    Dots.__super__.load.call(this);
    this.view.appendChild(this.renderer.view);
    this.xLimit = this.dots.length;
    this.yLimit = this.dots[0].length;
    window.onmousemove = this.handleMouseMove;
    return null;
  };

  Dots.prototype.unload = function() {
    Dots.__super__.unload.call(this);
    window.onmousemove = null;
    return null;
  };

  Dots.prototype.update = function() {
    var i, j, sprite, tgtAlpha, _i, _j, _ref, _ref1;
    Dots.__super__.update.call(this);
    if (this.cancelled) {
      return;
    }
    if (this.xFollow) {
      this.xCounter = this.curX;
    }
    if (this.yFollow) {
      this.yCounter = this.curY;
    }
    for (i = _i = 0, _ref = this.xCount; _i <= _ref; i = _i += 1) {
      for (j = _j = 0, _ref1 = this.yCount; _j <= _ref1; j = _j += 1) {
        sprite = this.dots[i][j];
        tgtAlpha = 1;
        if (this.invert) {
          tgtAlpha = 0;
        }
        if (!this.xOff && i === this.xCounter) {
          sprite.alpha = tgtAlpha;
          sprite.scale.x = sprite.scale.y = tgtAlpha * (this.spriteSize / 32);
        }
        if (!this.yOff && j === this.yCounter) {
          sprite.alpha = tgtAlpha;
          sprite.scale.x = sprite.scale.y = tgtAlpha * (this.spriteSize / 32);
        }
        if (this.invert) {
          if (sprite.alpha < 1) {
            sprite.alpha += 0.05;
            sprite.scale.x += 0.05;
            sprite.scale.y += 0.05;
            if (sprite.alpha > 1) {
              sprite.alpha = 1;
            }
            if (sprite.scale.x > 1) {
              sprite.scale.x = sprite.scale.y = this.spriteSize / 32;
            }
          }
        } else {
          if (sprite.alpha > 0) {
            sprite.alpha -= 0.05;
            sprite.scale.x -= 0.05;
            sprite.scale.y -= 0.05;
            if (sprite.alpha < 0) {
              sprite.alpha = 0;
            }
            if (sprite.scale.x < 0) {
              sprite.scale.x - (sprite.scale.y = 0);
            }
          }
        }
      }
    }
    if (!this.xOff) {
      this.xCounter += this.xDir;
      if (this.xLeft || this.xRight) {
        this.xCounter %= this.xLimit;
        if (this.xCounter < 0) {
          this.xCounter = this.xLimit - 1;
        }
      } else if (this.xBounce) {
        if (this.xCounter === this.xLimit) {
          this.xCounter = this.xLimit - 2;
          this.xDir *= -1;
        } else if (this.xCounter < 0) {
          this.xCounter = 1;
          this.xDir *= -1;
        }
      }
    }
    if (!this.yOff) {
      this.yCounter += this.yDir;
      if (this.yUp || this.yDown) {
        this.yCounter %= this.yLimit;
        if (this.yCounter < 0) {
          this.yCounter = this.yLimit - 1;
        }
      } else if (this.yBounce) {
        if (this.yCounter === this.yLimit) {
          this.yCounter = this.yLimit - 2;
          this.yDir *= -1;
        } else if (this.yCounter < 0) {
          this.yCounter = 1;
          this.yDir *= -1;
        }
      }
    }
    this.easeX += (this.mouseX - this.easeX) / 45;
    this.easeY += (this.mouseY - this.easeY) / 45;
    this.curX = Math.floor(this.easeX / this.spriteSize);
    this.curY = Math.floor(this.easeY / this.spriteSize);
    this.renderer.render(this.stage);
    return null;
  };

  Dots.prototype.resize = function() {
    var i, j, _i, _j, _ref, _ref1;
    if (this.loaded) {
      for (i = _i = _ref = this.dots.length - 1; _i >= 0; i = _i += -1) {
        for (j = _j = _ref1 = this.dots[i].length - 1; _j >= 0; j = _j += -1) {
          this.stage.removeChild(this.dots[i][j]);
          this.dots[i].splice(j, 1);
        }
      }
      this.dots = [];
      this.createSprites();
      this.xLimit = this.dots.length;
      this.yLimit = this.dots[0].length;
    }
    return null;
  };

  Dots.prototype.handleMouseMove = function(e) {
    var tgtAlpha, xid, yid;
    this.mouseX = e.pageX;
    this.mouseY = e.pageY;
    if (this.mouseTrail) {
      xid = Math.floor(this.mouseX / this.spriteSize);
      yid = Math.floor(this.mouseY / this.spriteSize);
      tgtAlpha = 1;
      if (this.invert) {
        tgtAlpha = 0;
      }
      this.dots[xid][yid].alpha = tgtAlpha;
      if (this.dots[xid] && this.dots[xid][yid - 1]) {
        this.dots[xid][yid - 1].alpha = tgtAlpha;
        this.dots[xid][yid - 1].scale.x = this.dots[xid][yid - 1].scale.y = tgtAlpha * (this.spriteSize / 32);
      }
      if (this.dots[xid] && this.dots[xid][yid + 1]) {
        this.dots[xid][yid + 1].alpha = tgtAlpha;
        this.dots[xid][yid + 1].scale.x = this.dots[xid][yid + 1].scale.y = tgtAlpha * (this.spriteSize / 32);
      }
      if (this.dots[xid - 1] && this.dots[xid - 1][yid]) {
        this.dots[xid - 1][yid].alpha = tgtAlpha;
        this.dots[xid - 1][yid].scale.x = this.dots[xid - 1][yid].scale.y = tgtAlpha * (this.spriteSize / 32);
      }
      if (this.dots[xid + 1] && this.dots[xid + 1][yid]) {
        this.dots[xid + 1][yid].alpha = tgtAlpha;
        this.dots[xid + 1][yid].scale.x = this.dots[xid + 1][yid].scale.y = tgtAlpha * (this.spriteSize / 32);
      }
    }
    return null;
  };

  Dots.prototype.createSprites = function() {
    var i, j, sp, _i, _j, _ref, _ref1;
    this.xCount = Math.round(window.innerWidth / this.spriteSize);
    this.yCount = Math.round(window.innerHeight / this.spriteSize);
    for (i = _i = 0, _ref = this.xCount; _i <= _ref; i = _i += 1) {
      this.dots[i] = [];
      for (j = _j = 0, _ref1 = this.yCount; _j <= _ref1; j = _j += 1) {
        if (this.deadDots.length === 0) {
          sp = new PIXI.Sprite(window.app.textures[0]);
        } else {
          sp = this.deadDots[0];
          this.deadDots.splice(0, 1);
        }
        sp.scale.x = sp.scale.y = this.spriteSize / 32;
        sp.position.x = i * this.spriteSize;
        sp.position.y = j * this.spriteSize;
        this.dots[i][j] = sp;
        sp.alpha = 0;
        this.stage.addChild(sp);
      }
    }
    return null;
  };

  return Dots;

})(Sketch);

Node = (function() {
  Node.prototype.x = 0;

  Node.prototype.y = 0;

  Node.prototype.view = null;

  Node.prototype.xVel = 0;

  Node.prototype.yVel = 0;

  Node.prototype.scale = 1;

  Node.prototype.sinPos = 0;

  Node.prototype.sinIncrement = 1;

  Node.prototype.scaleAmount = 0.5;

  function Node(x, y, view) {
    this.x = x;
    this.y = y;
    this.view = view;
    this.xVel = 3 - (6 * Math.random());
    this.yVel = 3 - (6 * Math.random());
    this.sinPos = Math.random() * 360;
    this.sinIncrement = Math.random() * 0.5;
    this.scaleAmount = Math.random() * 2;
  }

  return Node;

})();

Smoky = (function(_super) {
  __extends(Smoky, _super);

  Smoky.id = 'Smoky';

  Smoky.prototype.numNodes = 200;

  Smoky.prototype.checkDist = 100;

  Smoky.prototype.checkDistSq = 0;

  Smoky.prototype.nodes = [];

  Smoky.prototype.sprites = [];

  function Smoky(renderer) {
    this.renderer = renderer;
    this.mouseMove = __bind(this.mouseMove, this);
    this.update = __bind(this.update, this);
    this.resize = __bind(this.resize, this);
    this.unload = __bind(this.unload, this);
    this.load = __bind(this.load, this);
    this.checkDistSq = this.checkDist * this.checkDist;
    Smoky.__super__.constructor.call(this, this.renderer);
  }

  Smoky.prototype.load = function() {
    if (this.loaded) {
      window.onmousemove = this.mouseMove;
      this.windowWidth = window.innerWidth;
      this.windowHeight = window.innerHeight;
      this.areaWidth = this.windowWidth + 400;
      this.areaHeight = this.windowHeight + 400;
      this.view.appendChild(this.renderer.view);
      Smoky.__super__.load.call(this);
      return;
    }
    this.windowWidth = window.innerWidth;
    this.windowHeight = window.innerHeight;
    this.areaWidth = this.windowWidth + 400;
    this.areaHeight = this.windowHeight + 400;
    this.stage = new PIXI.Stage(window.app.stageColor);
    this.view = document.createElement('div');
    this.view.appendChild(this.renderer.view);
    this.createNodes();
    this.createSprites();
    window.onmousemove = this.mouseMove;
    Smoky.__super__.load.call(this);
    return console.log('LOAD DONE :: ' + Smoky.id);
  };

  Smoky.prototype.unload = function() {
    window.onmousemove = null;
    /*
    		for sp in @sprites
    			@stage.removeChild sp
    			sp = null
    
    		for node in @nodes
    			node = null
    
    		@windowWidth = @windowHeight = null
    		@areaWidth = @areaHeight = null
    		@renderer = null
    		@stage = null
    		@view = null
    		@nodes = []
    		@sprites = []
    */

    Smoky.__super__.unload.call(this);
    console.log('DESTROYED IT ' + this.cancelled);
    return null;
  };

  Smoky.prototype.resize = function() {
    return null;
  };

  Smoky.prototype.createNodes = function() {
    var i, _i, _ref;
    console.log('CREATING NODES');
    for (i = _i = 0, _ref = this.numNodes; _i <= _ref; i = _i += 1) {
      this.nodes.push(new Node(Math.random() * this.windowWidth, Math.random() * this.windowHeight));
    }
    return null;
  };

  Smoky.prototype.createSprites = function() {
    var i, sp, _i, _ref;
    console.log('CREATING SPRITES');
    this.tex = window.app.textures[0];
    for (i = _i = 0, _ref = this.numNodes; _i <= _ref; i = _i += 1) {
      sp = new PIXI.Sprite(this.tex);
      sp.pivot.x = 16;
      sp.pivot.y = 16;
      sp.blendMode = PIXI.blendModes.SCREEN;
      sp.alpha = 0.1 + (Math.random() * 0.2);
      this.sprites.push(sp);
      this.stage.addChild(sp);
    }
    return null;
  };

  Smoky.prototype.updateSprites = function() {
    var distTo, i, _i, _ref;
    for (i = _i = 0, _ref = this.numNodes; _i <= _ref; i = _i += 1) {
      this.nodes[i].x += this.nodes[i].xVel;
      this.nodes[i].y += this.nodes[i].yVel;
      this.nodes[i].sinPos += this.nodes[i].sinIncrement;
      this.nodes[i].sinPos %= 360;
      this.nodes[i].scale = 10 + (Math.sin(this.nodes[i].sinPos * (Math.PI / 180)) * this.nodes[i].scaleAmount);
      if (this.nodes[i].x > this.windowWidth + 200) {
        this.nodes[i].x -= this.areaWidth;
      } else if (this.nodes[i].x < -200) {
        this.nodes[i].x += this.areaWidth;
      }
      if (this.nodes[i].y > this.windowHeight + 200) {
        this.nodes[i].y -= this.areaHeight;
      } else if (this.nodes[i].y < -200) {
        this.nodes[i].y += this.areaHeight;
      }
      distTo = this.distanceTo(this.nodes[i], {
        x: this.curX,
        y: this.curY
      });
      if (distTo.dist < this.checkDistSq) {
        this.nodes[i].xVel = ((distTo.xDif * -1) / this.checkDist) * 5;
        this.nodes[i].yVel = ((distTo.yDif * -1) / this.checkDist) * 5;
      }
      this.sprites[i].position.x = this.nodes[i].x;
      this.sprites[i].position.y = this.nodes[i].y;
      this.sprites[i].scale.x = this.sprites[i].scale.y = this.nodes[i].scale;
    }
    return null;
  };

  Smoky.prototype.distanceTo = function(object, target) {
    var xDif, yDif;
    xDif = target.x - object.x;
    yDif = target.y - object.y;
    return {
      xDif: xDif,
      yDif: yDif,
      dist: (xDif * xDif) + (yDif * yDif)
    };
  };

  Smoky.prototype.update = function() {
    Smoky.__super__.update.call(this);
    if (this.cancelled) {
      return;
    }
    this.updateSprites();
    this.renderer.render(this.stage);
    return null;
  };

  Smoky.prototype.mouseMove = function(e) {
    this.curX = e.pageX;
    this.curY = e.pageY;
    return null;
  };

  return Smoky;

})(Sketch);

MathUtils = (function() {
  function MathUtils() {}

  MathUtils.degToRadValue = Math.PI / 180;

  MathUtils.radToDegValue = 180 / Math.PI;

  MathUtils.twoPI = 2 * Math.PI;

  MathUtils.degToRad = function(val) {
    return val * MathUtils.degToRadValue;
  };

  MathUtils.radToDeg = function(val) {
    return val * MathUtils.radToDegValue;
  };

  return MathUtils;

})();

Spirals = (function(_super) {
  __extends(Spirals, _super);

  Spirals.id = 'Spirals';

  Spirals.prototype.midPoint = null;

  Spirals.prototype.nodes = [];

  Spirals.prototype.deadNodes = [];

  Spirals.prototype.newNodeCount = 1;

  Spirals.prototype.newNodeLimit = 10;

  Spirals.prototype.changeCount = 720;

  Spirals.prototype.changeLimit = 720;

  Spirals.prototype.rotateSpeed = 11;

  Spirals.prototype.moveSpeed = 0.6;

  Spirals.prototype.sqDist = 100;

  function Spirals(renderer) {
    this.renderer = renderer;
    this.createSprite = __bind(this.createSprite, this);
    this.createNode = __bind(this.createNode, this);
    this.distToMidpoint = __bind(this.distToMidpoint, this);
    this.updateNodes = __bind(this.updateNodes, this);
    this.randomisePattern = __bind(this.randomisePattern, this);
    this.resize = __bind(this.resize, this);
    this.update = __bind(this.update, this);
    this.unload = __bind(this.unload, this);
    this.load = __bind(this.load, this);
    Spirals.__super__.constructor.call(this, this.renderer);
  }

  Spirals.prototype.load = function() {
    var _this = this;
    if (!this.loaded) {
      this.stage = new PIXI.Stage(window.app.stageColor);
      this.view = document.createElement('div');
      this.view.appendChild(this.renderer.view);
      this.gui = new dat.GUI({
        autoPlace: false
      });
      this.gui.domElement.style.zIndex = 100;
      this.gui.domElement.style.position = 'absolute';
      this.gui.domElement.style.top = 0;
      this.gui.domElement.style.left = 0;
      this.gui.domElement.style.height = 'auto';
      this.view.appendChild(this.gui.domElement);
      this.gui.add(this, 'rotateSpeed', -50, 50).listen().onChange(function() {
        return _this.changeCount = _this.changeLimit;
      });
      this.gui.add(this, 'moveSpeed', 0.1, 10).listen().onChange(function() {
        return _this.changeCount = _this.changeLimit;
      });
      this.gui.close();
    }
    this.midPoint = {
      x: window.innerWidth * 0.5,
      y: window.innerHeight * 0.5
    };
    this.sqDist = (window.innerWidth * 0.5) * (window.innerWidth * 0.5);
    this.view.appendChild(this.renderer.view);
    this.randomisePattern();
    Spirals.__super__.load.call(this);
    return null;
  };

  Spirals.prototype.unload = function() {
    Spirals.__super__.unload.call(this);
    return null;
  };

  Spirals.prototype.update = function() {
    var newNode;
    Spirals.__super__.update.call(this);
    if (this.cancelled) {
      return;
    }
    if (window.app.spacePressed) {
      this.changeCount = this.changeLimit;
      window.app.spacePressed = false;
      this.randomisePattern();
    }
    this.newNodeCount--;
    if (this.newNodeCount === 0) {
      this.newNodeCount = this.newNodeLimit;
      newNode = this.createNode();
      this.nodes.push(newNode);
      this.stage.addChild(newNode.sprite);
    }
    this.changeCount--;
    if (this.changeCount === 0) {
      this.randomisePattern();
      this.changeCount = this.changeLimit;
    }
    this.updateNodes();
    this.renderer.render(this.stage);
    return null;
  };

  Spirals.prototype.resize = function() {
    this.midPoint.x = window.innerWidth * 0.5;
    this.midPoint.y = window.innerHeight * 0.5;
    this.sqDist = (window.innerWidth * 0.5) * (window.innerWidth * 0.5);
    return null;
  };

  Spirals.prototype.randomisePattern = function() {
    TweenMax.to(this, 0.5, {
      rotateSpeed: -50 + (Math.random() * 100),
      ease: Power4.easeOut
    });
    TweenMax.to(this, 0.5, {
      moveSpeed: Math.random() * 3,
      ease: Power4.easeOut
    });
    return null;
  };

  Spirals.prototype.updateNodes = function() {
    var angle, i, newx, newy, node, _i, _ref;
    for (i = _i = _ref = this.nodes.length - 1; _i >= 0; i = _i += -1) {
      node = this.nodes[i];
      node.y += this.moveSpeed;
      angle = MathUtils.degToRad(node.phase);
      newx = -node.y * Math.sin(angle);
      newy = node.y * Math.cos(angle);
      node.sprite.position.x = this.midPoint.x + newx;
      node.sprite.position.y = this.midPoint.y + newy;
      node.phase += this.rotateSpeed;
      node.phase %= 360;
      node.sprite.scale.x = node.sprite.scale.y = 0.25 + ((this.distToMidpoint(node) / this.sqDist) * 4);
      if ((newx - (16 * 5) + this.midPoint.x) > window.innerWidth) {
        this.stage.removeChild(node.sprite);
        this.nodes.splice(i, 1);
        this.deadNodes.push(node);
      }
    }
    return null;
  };

  Spirals.prototype.distToMidpoint = function(node) {
    var xDif, yDif;
    xDif = this.midPoint.x - node.sprite.position.x;
    yDif = this.midPoint.y - node.sprite.position.y;
    return (xDif * xDif) + (yDif * yDif);
  };

  Spirals.prototype.createNode = function() {
    var node;
    if (this.deadNodes.length === 0) {
      node = {
        y: 0,
        x: 0,
        sprite: this.createSprite(),
        phase: 0
      };
    } else {
      node = this.deadNodes[0];
      this.deadNodes.splice(0, 1);
      node.y = 0;
      node.x = 0;
      node.phase = 0;
    }
    return node;
  };

  Spirals.prototype.createSprite = function() {
    var sp;
    sp = new PIXI.Sprite(window.app.textures[0]);
    sp.pivot.x = 16;
    sp.pivot.y = 16;
    return sp;
  };

  return Spirals;

})(Sketch);

Trails = (function(_super) {
  __extends(Trails, _super);

  Trails.id = 'Trails';

  Trails.prototype.trailLength = 70;

  Trails.prototype.sprites = [];

  Trails.prototype.positions = [];

  Trails.prototype.sinOffset = 0;

  Trails.prototype.sinIncrement = 0;

  Trails.prototype.maxScale = 4;

  Trails.prototype.minScale = 1;

  Trails.prototype.wobbleAngle = 17;

  function Trails(renderer) {
    this.renderer = renderer;
    this.handleMouseMove = __bind(this.handleMouseMove, this);
    this.update = __bind(this.update, this);
    this.unload = __bind(this.unload, this);
    this.load = __bind(this.load, this);
    Trails.__super__.constructor.call(this, this.renderer);
    this.toAdd = 0.00000000001;
    this.sinIncrement = MathUtils.twoPI / 18;
  }

  Trails.prototype.load = function() {
    var i, sp, _i, _ref,
      _this = this;
    if (this.loaded) {
      this.gui.domElement.style.display = 'block';
      this.gui.close();
      this.view.appendChild(this.renderer.view);
      window.onmousemove = this.handleMouseMove;
      Trails.__super__.load.call(this);
    } else {
      this.curX = this.mouseX = window.innerWidth * 0.5;
      this.curY = this.mouseY = window.innerHeight * 0.5;
      this.stage = new PIXI.Stage(window.app.stageColor);
      for (i = _i = 0, _ref = this.trailLength - 1; _i <= _ref; i = _i += 1) {
        sp = new PIXI.Sprite(window.app.textures[0]);
        sp.alpha = 0;
        sp.pivot.x = 16;
        sp.pivot.y = 16;
        this.stage.addChild(sp);
        this.sprites.push(sp);
      }
      this.view = document.createElement('div');
      this.view.appendChild(this.renderer.view);
      window.onmousemove = this.handleMouseMove;
      this.gui = new dat.GUI({
        autoPlace: false
      });
      this.gui.domElement.style.zIndex = 100;
      this.gui.domElement.style.position = 'absolute';
      this.gui.domElement.style.top = 0;
      this.gui.domElement.style.left = 0;
      this.gui.domElement.style.height = 'auto';
      this.view.appendChild(this.gui.domElement);
      this.gui.add(this, 'sinIncrement', 0, MathUtils.twoPI / 5);
      this.gui.add(this, 'wobbleAngle', 0, 90);
      this.gui.add(this, 'maxScale', 0, 10).listen().onChange(function() {
        if (_this.maxScale < _this.minScale) {
          return _this.minScale = _this.maxScale;
        }
      });
      this.gui.add(this, 'minScale', 0, 10).listen().onChange(function() {
        if (_this.minScale > _this.maxScale) {
          return _this.maxScale = _this.minScale;
        }
      });
      this.gui.close();
      Trails.__super__.load.call(this);
    }
    return null;
  };

  Trails.prototype.unload = function() {
    window.onmousemove = null;
    this.gui.domElement.style.display = 'none';
    Trails.__super__.unload.call(this);
    return null;
  };

  Trails.prototype.update = function() {
    var angle, dist, newX, newY, p, pos, vecX, vecY, _i, _len, _ref;
    Trails.__super__.update.call(this);
    if (this.cancelled) {
      return;
    }
    angle = MathUtils.degToRad(Math.sin(this.sinOffset) * this.wobbleAngle);
    vecX = this.mouseX - this.curX;
    vecY = this.mouseY - this.curY;
    newX = (vecX * Math.cos(angle)) - (vecY * Math.sin(angle));
    newY = (vecX * Math.sin(angle)) + (vecY * Math.cos(angle));
    this.curX += newX / 100;
    this.curY += newY / 100;
    this.positions.push({
      x: this.curX,
      y: this.curY
    });
    if (this.positions.length > this.trailLength) {
      this.positions.splice(0, 1);
    }
    _ref = this.positions;
    for (p = _i = 0, _len = _ref.length; _i < _len; p = ++_i) {
      pos = _ref[p];
      this.sprites[p].scale.x = this.minScale + ((p / this.trailLength) * this.maxScale);
      this.sprites[p].scale.y = this.minScale + ((p / this.trailLength) * this.maxScale);
      this.sprites[p].position.x = pos.x;
      this.sprites[p].position.y = pos.y;
      this.sprites[p].alpha = p / this.trailLength;
    }
    this.renderer.render(this.stage);
    dist = Math.sqrt((vecX * vecX) + (vecY * vecY));
    if (dist === 0) {
      dist = 1;
    }
    this.toAdd = MathUtils.degToRad(30 / dist);
    this.sinOffset += this.sinIncrement + this.toAdd;
    this.sinOffset %= MathUtils.twoPI;
    return null;
  };

  Trails.prototype.handleMouseMove = function(e) {
    this.mouseX = e.pageX;
    this.mouseY = e.pageY;
    return null;
  };

  return Trails;

})(Sketch);

App = (function() {
  App.prototype.sketches = null;

  App.prototype.currentSketch = 0;

  App.prototype.numSketches = null;

  App.prototype.liveSketch = null;

  App.prototype.textures = null;

  App.prototype.menuPanel = null;

  App.prototype.infoButton = null;

  App.prototype.menuButton = null;

  App.prototype.menuOpen = false;

  App.prototype.infoOpen = false;

  App.prototype.stageColor = 0x0e0e0e;

  App.prototype.spacePressed = false;

  function App() {
    this.prev = __bind(this.prev, this);
    this.next = __bind(this.next, this);
    this.handleKeyPress = __bind(this.handleKeyPress, this);
    this.handleInterfaceOver = __bind(this.handleInterfaceOver, this);
    this.handleInterfaceOut = __bind(this.handleInterfaceOut, this);
    this.handleMenuClick = __bind(this.handleMenuClick, this);
    this.handleInfoClick = __bind(this.handleInfoClick, this);
    this.handleDivOut = __bind(this.handleDivOut, this);
    this.handleDivOver = __bind(this.handleDivOver, this);
    this.init = __bind(this.init, this);
    var i, toDo, _i, _len,
      _this = this;
    this.renderer = PIXI.autoDetectRenderer(window.innerWidth, window.innerHeight);
    window.onresize = function() {
      var sketch, _i, _len, _ref, _results;
      _this.renderer.resize(window.innerWidth, window.innerHeight);
      _ref = _this.sketches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sketch = _ref[_i];
        _results.push(sketch.sketch.resize());
      }
      return _results;
    };
    toDo = [Smoky, Trails, Dots, Spirals];
    this.textures = [PIXI.Texture.fromImage('/img/node.png')];
    this.sketches = [];
    for (_i = 0, _len = toDo.length; _i < _len; _i++) {
      i = toDo[_i];
      this.sketches.push({
        sketch: new i(this.renderer),
        id: i.id
      });
    }
    this.numSketches = this.sketches.length;
    this.currentSketch = this.sketches.length - 1;
    this["interface"] = document.getElementById('interface');
    this.infoButton = document.getElementById('info-button');
    this.infoButton.onmouseover = this.handleInterfaceOver;
    this.infoButton.onmouseout = this.handleInterfaceOut;
    this.infoButton.onclick = this.handleInfoClick;
    this.menuButton = document.getElementById('menu-button');
    this.menuButton.onmouseover = this.handleInterfaceOver;
    this.menuButton.onmouseout = this.handleInterfaceOut;
    this.menuButton.onclick = this.handleMenuClick;
    this.menuPanel = document.getElementById('menu-panel');
    this.nextButton = document.getElementById('next-sketch');
    this.prevButton = document.getElementById('previous-sketch');
    this.currentButton = document.getElementById('current-sketch');
    this.nextButton.onclick = this.next;
    this.prevButton.onclick = this.prev;
    this.currentButton.onclick = this.handleMenuClick;
    this.nextButton.onmouseover = this.prevButton.onmouseover = this.currentButton.onmouseover = this.handleDivOver;
    this.nextButton.onmouseout = this.prevButton.onmouseout = this.currentButton.onmouseout = this.handleDivOut;
    this.init();
  }

  App.prototype.init = function() {
    window.onkeyup = this.handleKeyPress;
    return null;
  };

  App.prototype.handleDivOver = function(e) {
    if (e.target === this.nextButton || e.target === this.prevButton || e.target === this.currentButton) {
      TweenMax.to(e.target, 0.3, {
        css: {
          color: 'rgb(255, 0, 61)'
        },
        ease: Power4.easeOut
      });
    }
    return null;
  };

  App.prototype.handleDivOut = function(e) {
    if (e.target === this.nextButton || e.target === this.prevButton || e.target === this.currentButton) {
      TweenMax.to(e.target, 2, {
        css: {
          color: '#dedede'
        },
        ease: Power4.easeOut
      });
    }
    return null;
  };

  App.prototype.handleInfoClick = function() {
    return null;
  };

  App.prototype.handleMenuClick = function() {
    var _this = this;
    this.menuOpen = !this.menuOpen;
    if (this.menuOpen) {
      $(this.menuPanel).css('z-index', '1200');
      TweenMax.to(this.menuPanel, 0.5, {
        css: {
          opacity: 1
        },
        ease: Power4.easeOut
      });
      TweenMax.to(this.infoButton, 0.5, {
        css: {
          color: '#e3e3e3'
        },
        ease: Power4.easeOut
      });
    } else {
      TweenMax.to(this.menuPanel, 0.5, {
        css: {
          opacity: 0
        },
        ease: Power4.easeOut,
        onComplete: function() {
          return $(_this.menuPanel).css('z-index', '1');
        }
      });
      TweenMax.to(this.menuButton, 0.5, {
        css: {
          color: '#e3e3e3'
        },
        ease: Power4.easeOut
      });
      TweenMax.to(this.infoButton, 0.5, {
        css: {
          color: '#e3e3e3'
        },
        ease: Power4.easeOut
      });
    }
    return null;
  };

  App.prototype.handleInterfaceOut = function(e) {
    TweenMax.to(e.target, 2, {
      css: {
        color: '#e3e3e3'
      },
      ease: Power4.easeOut
    });
    return null;
  };

  App.prototype.handleInterfaceOver = function(e) {
    TweenMax.to(e.target, 0.15, {
      css: {
        color: 'rgb(255, 0, 61)'
      },
      ease: Power4.easeOut
    });
    return null;
  };

  App.prototype.handleKeyPress = function(e) {
    var unicode;
    e.preventDefault();
    unicode = e.keyCode ? e.keyCode : e.charCode;
    if (unicode === 37) {
      this.prev();
    } else if (unicode === 39) {
      this.next();
    } else if (unicode === 32) {
      this.spacePressed = true;
    }
    return null;
  };

  App.prototype.next = function() {
    var lastSketch;
    lastSketch = this.sketches[this.currentSketch];
    this.changeSketch('next');
    this.unloadSketch(lastSketch.sketch);
    this.updateInfoContent();
    return null;
  };

  App.prototype.prev = function() {
    var lastSketch;
    lastSketch = this.sketches[this.currentSketch];
    this.changeSketch('prev');
    this.unloadSketch(lastSketch.sketch);
    this.updateInfoContent();
    return null;
  };

  App.prototype.updateInfoContent = function() {
    var nextId, prevId;
    prevId = this.currentSketch - 1;
    if (prevId < 0) {
      prevId = this.sketches.length - 1;
    }
    nextId = this.currentSketch + 1;
    if (nextId === this.sketches.length) {
      nextId = 0;
    }
    this.currentButton.innerHTML = '<p class="title-copy">' + this.sketches[this.currentSketch].id + '</p>' + this.generateIpsum(this.sketches[this.currentSketch].id);
    this.prevButton.innerHTML = '<p class="title-copy">' + this.sketches[prevId].id + '</p>';
    this.nextButton.innerHTML = '<p class="title-copy">' + this.sketches[nextId].id + '</p>';
    return null;
  };

  App.prototype.unloadSketch = function(sketch) {
    var _this = this;
    TweenMax.to(sketch.view, 1, {
      css: {
        opacity: 0
      },
      ease: Power4.easeOut,
      onComplete: function() {
        sketch.unload();
        return _this.loadCurrentSketch();
      }
    });
    return null;
  };

  App.prototype.changeSketch = function(dir) {
    if (dir === 'next') {
      this.currentSketch++;
    } else if (dir === 'prev') {
      this.currentSketch--;
    }
    if (this.currentSketch === this.sketches.length) {
      this.currentSketch = 0;
    } else if (this.currentSketch < 0) {
      this.currentSketch = this.sketches.length - 1;
    }
    return null;
  };

  App.prototype.loadCurrentSketch = function() {
    this.sketches[this.currentSketch].sketch.load();
    this.sketches[this.currentSketch].sketch.view.style.opacity = 0;
    document.body.appendChild(this.sketches[this.currentSketch].sketch.view);
    TweenMax.to(this.sketches[this.currentSketch].sketch.view, 1, {
      css: {
        opacity: 1
      },
      ease: Power4.easeOut
    });
    return null;
  };

  App.prototype.generateIpsum = function(label) {
    var str;
    str = "<p class='body-copy'>Well, the way they make shows is, they make one show. That show's called a pilot. Then they show that show to the people who make shows, and on the strength of that one show they decide if they're going to make more shows. Some pilots get picked and become television programs. Some don't, become nothing. She starred in one of the ones that became nothing.<!-- please do not remove this line --><div style='display:none;'><a href='http://slipsum.com'>lorem ipsum</a></div></p>";
    return str.replace(/show/g, label);
  };

  return App;

})();
